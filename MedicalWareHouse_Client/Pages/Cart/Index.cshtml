@page
@model MedicalWareHouse_Client.Pages.Cart.IndexModel
@{
    ViewData["Title"] = "Giỏ Hàng";
}

<div class="cart-container">
    <div class="header-section mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="main-title">Giỏ Hàng Của Bạn</h1>
                <p class="text-muted">Quản lý sản phẩm trước khi đặt hàng</p>
            </div>
            <a href="/MedicalPage" class="btn btn-outline-primary continue-shopping-btn">
                <i class="fas fa-arrow-left me-2"></i> Tiếp tục mua sắm
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="cart-items-container">
                <!-- Cart items will be loaded here -->
            </div>
        </div>
        <div class="col-lg-4">
            <div class="order-summary">
                <div class="card shadow-sm border-0 rounded-3">
                    <div class="card-body">
                        <h5 class="card-title mb-4">Tổng Đơn Hàng</h5>
                        <div class="summary-item d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted">Tổng số sản phẩm:</span>
                            <span class="cart-count fw-bold">0</span>
                        </div>
                        <div class="summary-item d-flex justify-content-between align-items-center mb-3">
                            <span class="text-muted">Tổng tiền:</span>
                            <span class="cart-total fw-bold fs-5">0 VNĐ</span>
                        </div>
                        <hr>
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary export-order-btn" onclick="createOrderFromCart()">
                                <i class="fas fa-file-export me-2"></i> Xuất Đơn Hàng
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .cart-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
        
        .main-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .continue-shopping-btn {
            border-radius: 50px;
            padding: 0.6rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .cart-items-container {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            padding: 1.5rem;
            min-height: 300px;
        }
        
        .cart-item {
            border: none;
            border-radius: 12px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            background-color: #f8f9fa;
            transition: all 0.2s ease;
        }
        
        .cart-item:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transform: translateY(-2px);
        }
        
        .cart-item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .cart-item-title {
            font-weight: 600;
            color: #334155;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
        }
        
        .cart-item-price {
            color: #64748b;
            font-weight: 500;
        }
        
        .quantity-input {
            width: 80px;
            text-align: center;
            border-radius: 50px;
            border: 1px solid #dee2e6;
            padding: 0.375rem 0.75rem;
        }
        
        .quantity-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-color: #86b7fe;
        }
        
        .remove-item {
            border-radius: 50px;
            padding: 0.375rem 0.75rem;
            transition: all 0.2s;
        }
        
        .order-summary {
            position: sticky;
            top: 2rem;
        }
        
        .summary-item {
            padding: 0.5rem 0;
        }
        
        .empty-cart {
            text-align: center;
            padding: 3rem 1rem;
        }
        
        .empty-cart-icon {
            font-size: 4rem;
            color: #cbd5e1;
            margin-bottom: 1.5rem;
        }
        
        .export-order-btn {
            border-radius: 50px;
            padding: 0.75rem 1rem;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        @@media (max-width: 992px) {
            .order-summary {
                margin-top: 2rem;
                position: static;
            }
        }
    </style>
}

@section Scripts {
    <script>
        class CartPage {
            constructor() {
                this.cartItems = new Map();
                this.loadFromLocalStorage();
                this.setupEventListeners();
            }

            loadFromLocalStorage() {
                const savedCart = localStorage.getItem('cart');
                if (savedCart) {
                    const cartData = JSON.parse(savedCart);
                    this.cartItems = new Map(cartData);
                }
                this.updateCartUI();
            }

            saveToLocalStorage() {
                localStorage.setItem('cart', JSON.stringify(Array.from(this.cartItems.entries())));
                this.updateCartUI();
            }

            setupEventListeners() {
                document.addEventListener('click', async (e) => {
                    if (e.target.closest('.remove-item')) {
                        const button = e.target.closest('.remove-item');
                        const medicalId = button.dataset.medicalId;
                        if (confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                            await this.removeFromCart(medicalId);
                        }
                    }
                });

                document.addEventListener('change', async (e) => {
                    if (e.target.matches('.quantity-input')) {
                        const input = e.target;
                        const medicalId = input.dataset.medicalId;
                        const quantity = parseInt(input.value);
                        const maxQuantity = parseInt(input.max);

                        if (quantity < 1) {
                            if (confirm('Bạn có muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                                await this.removeFromCart(medicalId);
                            } else {
                                input.value = 1;
                                await this.updateQuantity(medicalId, 1);
                            }
                        } else if (quantity > maxQuantity) {
                            input.value = maxQuantity;
                            await this.updateQuantity(medicalId, maxQuantity);
                            this.showToast(`Số lượng tối đa là ${maxQuantity}`, 'warning');
                        } else {
                            await this.updateQuantity(medicalId, quantity);
                        }
                    }
                });
            }

            async removeFromCart(medicalId) {
                try {
                    // Remove from local storage
                    this.cartItems.delete(medicalId);
                    this.saveToLocalStorage();

                    // Remove from server
                    const response = await fetch(`/api/cart/remove/${medicalId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            this.showToast('Đã xóa sản phẩm khỏi giỏ hàng', 'success');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showToast('Có lỗi xảy ra khi xóa sản phẩm', 'error');
                }
            }

            async updateQuantity(medicalId, quantity) {
                try {
                    // Update local storage
                    const item = this.cartItems.get(medicalId);
                    if (item) {
                        item.quantity = quantity;
                        this.saveToLocalStorage();
                    }

                    // Update server
                    const response = await fetch('/api/cart/update', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        },
                        body: JSON.stringify({
                            medicalId: medicalId,
                            quantity: quantity
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (!result.success) {
                            this.showToast(result.message, 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showToast('Có lỗi xảy ra khi cập nhật số lượng', 'error');
                }
            }

            updateCartUI() {
                const cartItemsContainer = document.querySelector('.cart-items-container');
                const cartTotal = document.querySelector('.cart-total');
                const cartCount = document.querySelector('.cart-count');
                const exportOrderBtn = document.querySelector('.export-order-btn');

                let totalAmount = 0;
                let totalItems = 0;

                const itemsHtml = Array.from(this.cartItems.entries()).map(([id, item]) => {
                    totalAmount += item.price * item.quantity;
                    totalItems += item.quantity;
                    return `
                        <div class="cart-item">
                            <div class="row align-items-center">
                                <div class="col-md-2 col-4 mb-md-0 mb-3">
                                    <img src="${item.image || '/images/no-image.png'}" alt="${item.name}" 
                                         class="cart-item-image img-fluid">
                                </div>
                                <div class="col-md-5 col-8">
                                    <h5 class="cart-item-title">${item.name}</h5>
                                    <p class="cart-item-price mb-2">${this.formatCurrency(item.price)}</p>
                                </div>
                                <div class="col-md-3 col-7 d-flex align-items-center">
                                    <div class="input-group">
                                        <input type="number" class="form-control quantity-input" 
                                               value="${item.quantity}" min="1" max="99" data-medical-id="${id}">
                                    </div>
                                </div>
                                <div class="col-md-2 col-5 text-end">
                                    <h5 class="mb-2">${this.formatCurrency(item.price * item.quantity)}</h5>
                                    <button class="btn btn-outline-danger btn-sm remove-item" data-medical-id="${id}">
                                        <i class="fas fa-trash me-1"></i> Xóa
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                }).join('');

                if (cartItemsContainer) {
                    cartItemsContainer.innerHTML = itemsHtml || `
                        <div class="empty-cart">
                            <i class="fas fa-shopping-cart empty-cart-icon"></i>
                            <h4>Giỏ hàng trống</h4>
                            <p class="text-muted mb-4">Hãy thêm sản phẩm vào giỏ hàng</p>
                            <a href="/MedicalPage" class="btn btn-primary btn-lg">
                                <i class="fas fa-arrow-left me-2"></i> Tiếp tục mua hàng
                            </a>
                        </div>
                    `;
                }

                if (cartTotal) cartTotal.textContent = this.formatCurrency(totalAmount);
                if (cartCount) cartCount.textContent = totalItems;
                if (exportOrderBtn) exportOrderBtn.disabled = this.cartItems.size === 0;
            }

            formatCurrency(amount) {
                return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
            }

            showToast(message, type = 'info') {
                // Create toast container if it doesn't exist
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                    document.body.appendChild(toastContainer);
                }
                
                // Create toast
                const toastId = `toast-${Date.now()}`;
                const bgClass = type === 'success' ? 'bg-success' : 
                                type === 'error' ? 'bg-danger' : 
                                type === 'warning' ? 'bg-warning' : 'bg-info';
                
                const toastHtml = `
                    <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header ${bgClass} text-white">
                            <strong class="me-auto">Thông báo</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;
                
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                
                // Initialize and show the toast
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement, {
                    delay: 3000
                });
                toast.show();
                
                // Remove after hiding
                toastElement.addEventListener('hidden.bs.toast', () => {
                    toastElement.remove();
                });
            }
        }

        function createOrderFromCart() {
            const cartData = [...window.cartPage.cartItems].map(([id, item]) => ({
                medicalId: id,
                quantity: item.quantity
            }));
            
            if (cartData.length === 0) {
                alert('Giỏ hàng trống! Vui lòng thêm sản phẩm vào giỏ hàng trước.');
                return;
            }

            // Hiển thị thông báo khi chuyển trang
            window.cartPage.showToast('Đang chuyển đến trang tạo đơn hàng...', 'info');
            
            setTimeout(() => {
                const cartDataStr = encodeURIComponent(JSON.stringify(cartData));
                window.location.href = `/OrderPage/Create?type=Export&cartData=${cartDataStr}`;
            }, 1000);
        }

        // Initialize cart page when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            window.cartPage = new CartPage();
        });
    </script>
} 